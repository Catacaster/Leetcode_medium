/*
attempt : 1
time	: 336ms
O	: NlogN
method	: binary search
*/

class Solution {
public:
    int minDays(vector<int>& bloomDay, int m, int k) {
        int num = bloomDay.size();
        if(num < m*k)   return -1;  //flower cannot be made
        int l=0, r=0;
        for(int i=0; i<num; i++){
            r = max(r, bloomDay[i]);
        }
        while(l < r){
            int m_actual=0, mid=(l+r)/2;
            for(int i=0; i<num;){
                int adjacent = 0;   //number of adjacents available
                while(adjacent < k && i<num && bloomDay[i] <= mid){
                    i++, adjacent++;
                }
                if(adjacent == k) m_actual++;
                else    i++;
            }
            if(m_actual < m) l=mid+1; //if days is not enough to make sufficient bouquet
            else             r=mid;
        }
        return l;
    }
};
