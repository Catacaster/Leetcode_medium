/*
attempt	: 1
time	: 36ms 86.54%
O	: n log n
method	: hash & reverse hash
*/

class Solution {
public:
    string frequencySort(string s) {
        std::unordered_map<char, int> hash; //hash table
        int n = s.size();
        for(int i=0; i<n; i++){
            hash[s[i]]++;
        }
        std::vector<std::pair<int, char>>  count; //reverse hash::count-char 
        for(auto it=hash.begin(); it != hash.end(); it++){
            count.push_back(std::make_pair(it->second, it->first)); //fill reverse hash table
        }
        std::string result; //result
        std::sort(count.begin(), count.end());
        for(int i=count.size()-1; i >= 0; i--){
            int value = count[i].first;
            while(value-- > 0){
                result += count[i].second;
            }
        }
        return result;
    }
};