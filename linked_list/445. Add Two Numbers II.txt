/*
attempt	: 1
time	: 52ms
O	: N
method	: comment
improve	: use stack, last in, first out
*/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int size1(0), size2(0);
        for(auto ptr = l1; ptr; ptr = ptr->next)
            size1++;
        for(auto ptr = l2; ptr; ptr = ptr->next)
            size2++;
        ListNode* head = helper(size1, size2, l1, l2);
        if(head->val >= 10){
            head->val -= 10;
            head = new ListNode(1, head);
        }
        return head;
    }
    ListNode* helper(int size1, int size2, ListNode* l1, ListNode* l2){
        if(!size1)
            return nullptr; //if out of size
        if(size1 == size2){
            ListNode* nptr = helper(size1-1, size2-1, l1->next, l2->next);
            int val = l1->val + l2->val;//add up value to val
            if(nptr && nptr->val >= 10){        //check if lsd >= 10
                nptr->val -= 10;
                val++;
            }
            return (new ListNode(val, nptr));
        }
        else if(size1 > size2){
            ListNode* nptr = helper(size1-1, size2, l1->next, l2);
            int val = l1->val;
            if(nptr && nptr->val >= 10){
                nptr->val -= 10;
                val++;
            }
            return (new ListNode(val, nptr));
        }
        else{
            ListNode* nptr = helper(size1, size2-1, l1, l2->next);
            int val = l2->val;
            if(nptr && nptr->val >= 10){
                nptr->val -= 10;
                val++;
            }
            return (new ListNode(val, nptr));
        }
    }
};