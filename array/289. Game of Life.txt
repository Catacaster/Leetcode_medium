/*
attempt	: 1
time	: 0ms
O	: n^2 (best)
method	:
*/

class Solution {
public:
    void gameOfLife(vector<vector<int>>& board) {
        vector<vector<int>> result(board.size(), vector<int>(board[0].size(), 0));
        for(int i=0; i<board.size(); i++){
            for(int j=0; j<board[0].size(); j++){
                int temp(count_neighbors(board, i, j));
                if(board[i][j] == 1){
                    if(temp == 2 || (temp == 3))
                        result[i][j] = 1;
                }
                else if(temp == 3)
                    result[i][j] = 1;
            }
        }
        for(int i=0; i<board.size(); i++){
            for(int j=0; j<board[0].size(); j++){
                board[i][j] = result[i][j];
            }
        }
    }
    int count_neighbors(vector<vector<int>>& board, int m, int n){
        int count(0);
        for(int i=-1; i<=1; i++){
            if(m+i < 0 || m+i >= board.size())
                continue;
            for(int j=-1; j<=1; j++){
                if(n+j < 0 || n+j >= board[0].size() || (i==0 && j==0))
                    continue;
                count += board[m+i][n+j];
            }
        }
        return count;
    }
};